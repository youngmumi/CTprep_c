#include<stdio.h>
#include<string.h>
#include <stdbool.h>
#define N 1024

//구조체를 이용하여 스택에 저장 되는 값들의 배열인 stk와 가장 윗단 top을 선언
typedef struct stack {
	int stk[N];
	int top;
}stack;

//stack이 만들어 지면 사용 될 top을 초기화
void initStack(stack* S) {
	S->top = -1;
}

//스택이 비었는지 확인. 각 개별 스택을 구분하기 위해 포인터를 사용한다.
bool isEmpty(stack* S) {
	if (S->top < 0)
		return true;
	else
		return false;
}

//스택이 차있는지 확인. 각 개별 스택을 구분하기 위해 포인터를 사용한다.
bool isFull(stack* S) {
	if (S->top >= N)
		return true;
	else
		return false;
}

//스택에 v를 push 구조체 stack에 있는 변수인 stk와 top을 사용하기 위해 ->를 사용한다.
void push(stack* S, int v) {
	if (isFull(S))
		printf ("스택이 꽉 차있습니다.\n");
	else
		S->stk[++(S->top)] = v;
}

//스택에 저장 된 값을 pop 구조체 stack에 있는 변수인 stk와 top을 사용하기 위해 ->를 사용한다.
int pop(stack* S) {
	if (isEmpty(S))
		printf("스택에 값이 없습니다.\n");
	else 
		return S->stk[(S->top)--];
	
}

//스택의 가장 윗단인 top을 리턴 구조체 stack에 있는 변수인 stk와 top을 사용하기 위해 ->를 사용한다.
int Top(stack* S) {
	if (isEmpty(S))
		printf("스택에 값이 없습니다.\n");
	else
		return S->stk[S->top];
}
 
int solution(int* board[5][5], int* moves[8]) {
    int answer = 0;
    int length_moves=strlen(moves);
    int i, j;
    
    for(i=0;i<length_moves;i++)
    {
        int check = moves[i] - 1;
        for(j=0;j<length_moves;j++)
        {
            if(board[j][check] != 0)
            {
                if(!isEmpty(board) == board[j][check] && Top(board) == board[j][check])
                {
                    pop(board);
                    answer += 2;
                }
                else
                    push(*board[j][check]);
                    
                board[j][check] = 0;
                break;
            }
        }
    }
    return answer;
}

int main(){
	
	int board[5][5]={[0,0,0,0,0],[0,0,1,0,3],[0,2,5,0,1],[4,2,4,4,2],[3,5,1,3,1]};
	int moves[8]={1,5,3,5,1,2,1,4};
	
	
	printf("%d", solution(board, moves));
	
}
